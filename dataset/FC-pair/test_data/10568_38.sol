contract c10568{
    /*
     *  @dev Minting function calling token._mint procedure
     *  @param address beneficiary is the destination of the token ownership
     *  @param bytes32 generator is a hash generated by the fundraiser contract
     *  @param uint karma is a genome influencer which will help to get a higher bonus gene
     *  @return bool - true
     */
    function mint(address beneficiary, bytes32 generator, uint karma) onlyOwner external returns (bool)  {
        /*
         *  Interpretation mechanism [variant (value interval)]
         *  Flower:             1 (0-85); 2 (86-170); 3 (171-255);
         *  Bloom:              1 (0-51); 2 (52-102); 3 (103-153); 4 (154-204); 5 (205-255)
         *  Stem:               1 (0-85); 2 (86-170); 3 (171-255);
         *  Special:            None (0-222);1 (223-239); 2 (240-255);
         *  Color Bloom:        hue variation
         *  Color Stem:         hue variation
         *  Color Background:   hue variation
         */
        bytes1[7] memory genome;
        genome[0] = generator[0];
        genome[1] = generator[1];
        genome[2] = generator[2];
        if (uint(generator[3]) + karma >= 255) {
            genome[3] = bytes1(255);
        } else {
            genome[3] = bytes1(uint(generator[3]) + karma);
        }
        genome[4] = generator[4];
        genome[5] = generator[5];
        genome[6] = generator[6];
        genes[lastID() + 1] = bytesToBytes7(genome);
        emit FlowerAwarded(beneficiary, lastID() + 1, genes[lastID() + 1]);
        _mint(beneficiary, lastID() + 1);
        return true;
    }
}